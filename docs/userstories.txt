done:
buch python data modelling noch fertig lesen
/word GET meldung wenn nicht gefunden
/word GET statt nach id auch nach url param mit de/es property
/word DELETE
/word POST   save changes to word
/quiz PUT (save a single result)  #for offline use: check locally, store-only batch call later.
/quiz GET   get next question to ask

TODOs:
return id with response to PUT /quiz
/quiz/<id> GET (check an answer)       #for online use: have logic server-side

GET /allwords, GET /word/<id> -> include id in return json 
PUT /quiz must be idempotent -> check if already exists with same timestamp , update difficulty and lastquiz
GET /quiz?count=10   batch-get next questions
/quiz POST (combination of GET(check) and PUT(store))

improvements:
refactor /word and /allwords into a single resource (allwords put works equally well as word put, allwords get can be handled by word get without id or search param)



00) Setup
- projectsetup backend
- basisseite frontend

10) Liste aller Wörter anzeigen
- backend
- frontend

20) Neues Wort eingeben
- backend 
- frontend

21) Seiten designen
- wort eingeben
- Startseite
- Abfrage
- wortliste anzeigen, mit edit-link, dann editierbar und speichern-button, und mit lösch-button
  
============= TODO ================



22) Seiten HTML/CSS
- Basis-Bootstrap-Seite anlegen (richtige hmtl-strukur, css rein, jquery verlinken)
- Farben im CSS anpassen
- Startseite mit Links
- Eingabeseite
- Listen-Seite
- Abfrage-seite

23) Dummy-Implementierung der API
   keine datenbank, nur array, und funktionen mocken, nur controller dafür

24) API echt implementieren
mit db
  
05) Einzelnes Wort zur abfrage holen   
- holen und anzeigen in frontend
- Initialdaten definieren, einladen
- echte implementierung


30) Wort löschen
- backend
- frontend
40) Wörter editieren
- backend
- frontend
50) Abfrage  Wortliste ob richtig
- backend random
- fronend anzeige 
60) Store train result
- frontend store
- backend store

=======================
Release 1.0
=======================

70) Test basic urgency
80) Wörter in Kapitel unterteilen
90) alle Wörter eines Kapitels in Serie abfragen
100) beim training jedes Wort wederholen bis 2x richtigx
110) Besserer Algorithmus für welche wörter fällig sind
120) check if word already exists when adding 
130) Eingabe Sonderzeichen für Polnisch über feste Funktionstasten 


140) Accounts (Zuordnung nur meine Wörter) -> use google accounts
150) Statistiken wie viel trainiert / Entwicklung Schwierigkeit / Grösse Wortschatz
160) Freie Belegung der Funktionstasten mit Zeichen
180) Multi-lanugage vokabular
185) Internationalisierung der GUI
190) Behandlung Synonyme/Artikel/Tippfehler etc
200) csv-import
210) csv-export
215) Offline-Version
220) iphone-version
230) android-version

Future ideas:
when showing a quiz, show vertical bar from bottom to top of card as indicator of progress (a la flashcards pro)
 

